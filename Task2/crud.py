from sqlalchemy.orm import Session
import models, schemas
import nltk
nltk.download('vader_lexicon')
from nltk.sentiment.vader import SentimentIntensityAnalyzer


analyzer = SentimentIntensityAnalyzer()

def analyze_sentiment(feedback: str):
    if not feedback:
        return None
    scores = analyzer.polarity_scores(feedback)
    compound = scores["compound"]  #compound is a summary score of all proportions
    if compound >= 0.05:
        return "positive"
    elif compound <= -0.05:
        return "negative"
    return "neutral"

def get_employees(db: Session):
    return db.query(models.Employee).all()  #all records 

def get_employee(db:Session, emp_id:int):
    return(db.query(models.Employee).filter(models.Employee.id == emp_id).first())

def create_employee(db: Session, employee: schemas.EmployeeCreate):
    sentiment = analyze_sentiment(employee.feedback)
    db_employee = models.Employee(name=employee.name, email=employee.email, feedback = employee.feedback, sentiment=sentiment)
    db.add(db_employee)
    db.commit()
    db.refresh(db_employee) #need to get autogenerated id 
    return db_employee

def update_employee(db:Session, emp_id:int, employee: schemas.EmployeeUpdate):
    db_employee = db.query(models.Employee).filter(models.Employee.id==emp_id).first()
    if db_employee:
        db_employee.name = employee.name
        db_employee.email = employee.email
        db_employee.feedback = employee.feedback
        db_employee.sentiment = analyze_sentiment(employee.feedback)
        db.commit()
        db.refresh(db_employee)
    return db_employee

def delete_employee(db:Session, emp_id:int):
    db_employee = db.query(models.Employee).filter(models.Employee.id==emp_id).first()
    if db_employee:
        db.delete(db_employee)
        db.commit()
    return db_employee







